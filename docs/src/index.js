// # Oriento API
// The methods below will call the server functions. User authentication for the server must first be configured in the
// orientdb-server-config.xml file. See
// [OrientDB Wiki](https://github.com/orientechnologies/orientdb/wiki/DB-Server#users).
// To manipulate the actual database and records, see the
// [document database](https://github.com/nitrog7/node-orientdb/wiki/Document-Database) api page. Additional details
// can be found on the [OrientDB wiki](https://github.com/orientechnologies/orientdb/wiki/Network-Binary-Protocol) page.

// ## Initialize the Server
// First, require the library.
var Oriento = require('oriento');

// ### Basic Configuration
// Now, we call the `Oriento` function, passing in our connection options.
var server = new Oriento({
  host: 'localhost',
  port: 2424,
  username: 'root',
  password: 'yourpassword'
});

// `server` is now an instance of `Oriento.Server`. it provides methods for creating, listing, dropping and  using
// databases.

// ### Connection Pool
//
// Configuring the client to use a connection pool.
// By default Oriento uses one socket per server, but it is also possible to use a connection pool.
// You should carefully benchmark this against the default setting for your use case,
// there are scenarios where a connection pool is actually slightly worse for performance than a single connection.

var server = new Oriento({
  host: 'localhost',
  port: 2424,
  username: 'root',
  password: 'yourpassword',
  pool: {
    max: 10 // 1 by default
  }
});

// ## Methods
// The methods are BlueBird promise objects and use the then and error methods for callbacks. Take a look at the
// [Bluebird API](https://github.com/petkaantonov/bluebird/blob/master/API.md) for more details.

server.method().then(resultMethod).error(errorMethod);

// _Example:_
server.method()
  .then(function(results) {
    console.log('Success with results.');
  })
  .error(function(error) {
    console.log('Error with message.');
  });



// ## Server

// Properties:
// - **sessionId** _(Number)_ - Unique session id automatically generated by the server.
// - **host** _(String)_ - Location of the server. Default: "localhost".
// - **port** _(Number)_ - Server port. Default: 2424.
// - **username** _(String)_ - Authentication username. Default: "admin".
// - **password** _(String)_ - Authentication password. Default: "admin".
// - **protocolVersion** _(Number)_ - Current server protocol
// - **logger** _(Object)_ - Logging utility
// - **socket** _(Object)_ - Socket server is using to connect.


// ### Connect
// Oriento connects to the OrientDB server the first time it is needed, if no connection has already been made.


// ### List
// List all the databases on the server.
//
// > Note: there is no need to call `connect()`, the
// > connection is established the first time it is needed.
server.list();

// **Response:**
// - **list** _(Object)_ - A list of database objects.
//   - **Database** _(Object)_ - Database objects.
//
// **Example**
server.list()
  .then(function(list) {
    console.log('Databases: ', list);
  });



// ### Exists
// Check whether a database exists.
server.exists(name);

// **Parameters:**
// - **name** _(String)_ - Database name.
//
// **Response:**
// - **results** _(Boolean)_ - If database exists, returns true. Otherwise false.

// **Example**
server.exists('mydb')
  .then(function(results) {
    console.log('Database exists: ', results);
  });



// ## Configuration
// The configuration file is located in orientdb-server-config.xml, under:
// > &lt;orient-server&gt;
// >   &lt;properties&gt;&lt;/properties&gt;
// > &lt;/orient-server&gt;


// ### List
// Get list of parameters set in the configuration.
server.config.list();

// **Response:**
// - **list** _(Object)_ - List of parameters.
//  - **object** _(Object)_ - Config parameter object.
//    - **name** _(String)_ - Parameters key.
//    - **value** _(String)_ - Parameter value.
//
// **Example**
server.config.list()
  .then(function(list) {
    console.log('List of the configuration properties: ' + list);
  });


// ### Get
// Get configuration parameters
server.config.get(key);
// **Parameters:**
// - **key** _(String)_ - Property key.
//
// **Response:**
// - **value** _(String)_ - Value of property.
//
// _Example:_
server.config.get('db.pool.max')
  .then(function(value) {
    console.log('Config param, db.pool.max = ' + value);
  });



// ### Set
// Set a configuration parameter
server.config.set(key, value);
// Parameters:
// - **key** _(String)_ - Property key.
// - **value** _(String)_ - Value of property.
//
// Response:
// - **results** _(Boolean)_ - If property was set successfully, return true. Otherwise false.
//
// _Example:_
server.config.set('db.pool.max', 10)
  .then(function(results) {
    console.log('Config param, db.pool.max updated? ', results);
  });




// ## Database

// Properties:
// - **name** _(String)_ - Database name.
// - **sessionId** _(Number)_ - The current session id.
// - **storage** _(String)_ - Type of stroage. Options: plocal, local, or memory. Default: "plocal".
// - **type** _(String)_ - Type of database. Options: document, or graph. Default: "document".
// - **username** _(String)_ - Authentication username.
// - **password** _(String)_ - Authentication password.
// - **dataSegments** _(Array)_ - A list of data segments.
// - **transactionId** _(Number)_ - Transaction id.
// - **server** _(Object)_ - Server object.
// - **cluster** _(Object)_ - Cluster object.
// - **class** _(Object)_ - Class object.
// - **record** _(Object)_ - Record object.
// - **vertex** _(Object)_ - Vertex object.
// - **edge** _(Object)_ - Edge object.
// - **index** _(Object)_ - Index object.


// ### Open
// Using an existing database
server.use(name);
// Parameters:
// - **name** _(String)_ - Database name.
//
// Response:
// - **database** _(Object)_ - Database object.
//
// _Example:_
var db = server.use('mydb');
console.log('Using database: ' + db.name);

// Using an existing database with credentials
server.use(config);
// Parameters:
// - **name||config** _(String|Object)_ - Database name or configuration.
//   - **name** _(String)_ - Database name.
//   - **username** _(String)_ - Authentication username.
//   - **password** _(String)_ - Authentication password.
//
// Response:
// - **Database** _(Object)_ - Database object.
//
// _Example:_
var db = server.use({
  name: 'mydb',
  username: 'admin',
  password: 'admin'
});
console.log('Using database: ' + db.name);


// ### Add
// Creating a new database in the OrientDB server instance.
server.create(config);
// Parameters:
// - **config** _(Object)_ - Database configuration.
//   - **name** _(String)_ - Name of the database. _Required_.
//   - **type** _(String)_ - Type of database. Options: document or graph. Default: "document".
//   - **storage** _(String)_ - Storage type. Options: plocal, local, memory. Default: "plocal".
//
// Response:
// - **Database** _(Object)_ - Database object.
//
// _Example:_
server.create({
    name: 'mydb',
    type: 'graph',
    storage: 'plocal'
  })
  .then(function(db) {
    console.log('Created a database called ' + db.name);
  });


// ### Delete
// Removes a database from the OrientDB Server instance.
server.delete(config);
// Parameters:
// - **config** _(Object)_ - Database configuration.
//   - **name** _(String)_ - Name of the database. _Required_.
//   - **type** _(String)_ - Type of database. Options: document or graph. Default: "document".
//   - **storage** _(String)_ - Storage type. Options: plocal, local, memory. Default: "plocal".
//
// Response:
// - **results** _(Boolean)_ - If database exists, returns true. Otherwise false.
//
// _Example:_
server.delete({
    name: 'mydb',
    type: 'graph',
    storage: 'plocal'
  })
  .then(function(results) {
    console.log('Delete a database: ' + results);
  });



// ## Classes

// ### List
// Listing all the classes in the database
db.class.list();
//
// **Response:**
// - **list** _(Array)_ - List of class objects.
//
// _Example:_
db.class.list()
  .then(function(classes) {
    console.log('There are ' + classes.length + ' classes in the db:', classes);
  });

// ### Get
// Getting an existing class
db.class.get(name);
//
// **Parameters:**
// - **name** _(String)_ - Class name.
//
// **Response:**
// - **class** _(Object)_ - Class object.
//
// _Example:_
db.class.get('MyClass')
  .then(function(MyClass) {
    console.log('Got class: ' + MyClass.name);
  });


// ### Add
// Creating a new class
db.class.create(name);
//
// **Parameters:**
// - **name** _(String)_ - New class name.
//
// **Response:**
// - **class** _(Object)_ - Class object.
//
// _Example:_
db.class.create('MyClass')
  .then(function(MyClass) {
    console.log('Created class: ' + MyClass.name);
  });

// Creating a new class that extends another
db.class.create(name, extends);
//
// **Parameters:**
// - **name** _(String)_ - New class name.
// - **extends** _(String)_ - Class name to extend.
//
// **Response:**
// - **class** _(Object)_ - Class object.
//
// _Example:_
db.class.create('MyOtherClass', 'MyClass')
  .then(function(MyOtherClass) {
    console.log('Created class: ' + MyOtherClass.name);
  });


// ### Properties

// #### List
// Listing properties in a class
Class.property.list();
//
// **Response:**
// - **list** _(Array)_ - List of properties.
//
// _Example:_
MyClass.property.list()
  .then(function(properties) {
    console.log('The class has the following properties:', properties);
  });

// #### Add
// Adding a property to a class.
Class.property.create(config);
//
// **Parameters:**
// - **config** _(Object)_ - Property name and value.
//
// **Response:**
// - **results** _(Boolean)_ - If property was deleted, returns true. Otherwise false.
//
// _Example:_
MyClass.property.create({
    name: 'name',
    type: 'String'
  })
  .then(function() {
    console.log('Property created.');
  });

// #### Delete
// Deleting a property from a class
Class.property.delete(name);
//
// **Parameters:**
// - **name** _(String)_ - Property name to delete.
//
// **Response:**
// - **results** _(Boolean)_ - If property was deleted, returns true. Otherwise false.
//
// _Example:_
MyClass.property.delete('myprop')
  .then(function() {
    console.log('Property deleted.');
  });



// ## Records

// ### List Records
// Listing records in a class
Class.list();
//
// **Response:**
// - **list** _(Array)_ - List of record objects.
//
// _Example:_
MyClass.list()
  .then(function(records) {
    console.log('Found ' + records.length + ' records:', records);
  });

// ### Get
// Loading a record by RID.
db.record.get(recordId);
//
// **Parameters:**
// - **recordId** _(String)_ - Record id of record to retrieve.
//
// **Response:**
// - **record** _(Object)_ - Record object.
//
// _Example:_
db.record.get('#1:1')
  .then(function(record) {
    console.log('Loaded record:', record);
  });

// ### Add Record
// Create a new record.
db.record.create(properties);
//
// **Parameters:**
// - **properties** _(Object)_ - Record properties to set.
//
// **Response:**
// - **record** _(Object|Array)_ - Updated record(s).
//
// _Example:_
db.record.create({
    '@class': 'OUser',
    name: 'testuser',
    password: 'testpassword',
    status: 'ACTIVE'
  })
  .then(function (record) {
    console.log('Created record:', record);
  });

// Creating a record for a class.
Class.create(properties);
//
// _Example:_
MyClass.create({
    name: 'John McFakerton',
    email: 'fake@example.com'
  })
  .then(function (record) {
    console.log('Created record: ', record);
  });


// ### Update
// Modify an existing record.
db.record.update(properties, options);
//
// **Parameters:**
// - **properties** _(Object)_ - Record properties to set.
// - **options** _(Object)_ - Update options.
//
// **Response:**
// - **record** _(Object|Array)_ - Updated record(s).
//
// _Example:_
db.record.update({
    '@rid': createdRID,
    name: 'testuserrenamed'
  },
  {
    preserve: true
  })
  .then(function (record) {
    record.name.should.equal('testuserrenamed');
  });


// ### Delete
// Deleting a record.
db.record.delete(recordId);
//
// **Parameters:**
// - **recordId** _(String)_ - Record id of record to delete.
//
// **Response:**
// - **results** _(Boolean)_ - If record was deleted, returns true. Otherwise false.
//
// _Example:_
db.record.delete('#1:1')
  .then(function() {
    console.log('Record deleted');
  });



// ## Vertex

// ### Add
// Creating a new, empty vertex.
db.vertex.create(name);
//
// **Parameters:**
// - **class|properties** _(String|Object)_ - Vertex class or properties to set.
//
// **Response:**
// - **vertex** _(Object)_ - Vertex created.
//
// _Example:_ Creating a new vertex with no properties, just a class name.
db.vertex.create('V')
  .then(function(vertex) {
    console.log('created vertex', vertex);
  });

//
// _Example:_ Creating a new vertex with some properties.
db.vertex.create({
    '@class': 'V',
    key: 'value',
    foo: 'bar'
  })
  .then(function(vertex) {
    console.log('created vertex', vertex);
  });

// ### Delete
// Deleting a vertex.
db.vertex.delete(recordId);
//
// **Parameters:**
// - **recordId** _(String)_ - Record id of vertex to delete.
//
// **Response:**
// - **count** _(Number)_ - Number of vertices deleted.
//
// _Example:_
db.vertex.delete('#12:12')
  .then(function(count) {
    console.log('deleted ' + count + ' vertices');
  });

// ## Edges

// ### Add
// Creating a simple edge between vertices.
db.edge.from(originId).to(destId).create(class|properties);
//
// **Parameters:**
// - **originId** _(String)_ - Record id for origin record.
// - **destId** _(String)_ - Record id for destination record.
// - **class|properties** _(String|Object)_ - Edge class or properties to set.
//
// **Response:**
// - **edge** _(Object)_ - Created edge.
//
// _Example:_
db.edge.from('#12:12')
  .to('#12:13')
  .create('E')
  .then(function(edge) {
    console.log('created edge:', edge);
  });

// Creating an edge with properties.
db.edge.from(originId).to(destId).create(properties);

// _Example:_
db.edge.from('#12:12')
  .to('#12:13')
  .create({
    '@class': 'E',
    key: 'value',
    foo: 'bar'
  })
  .then(function (edge) {
    console.log('created edge:', edge);
  });

// ### Delete
// Deleting an edge between vertices.
db.edge.from(originId).to(destId).delete();
//
// **Parameters:**
// - **originId** _(String)_ - Record id for origin record.
// - **destId** _(String)_ - Record id for destination record.
//
// **Response:**
// - **count** _(Number)_ - Number of edges deleted.
//
// _Example:_
db.edge.from('#12:12')
  .to('#12:13')
  .delete()
  .then(function(count) {
    console.log('Deleted ' + count + ' edges');
  });

// ## Query

// ### SQL
// Send SQL-like commands to OrientDB.
db.query(sql);
//
// _Example:_
db.query('SELECT FROM V LIMIT 5')
  .then(function(results){
    console.log('Query results: ', results);
  });

// ### Select

// **One** -
// Select a single record from the query. Results are returned as an object.
db.select().from(class).where(params).one();

// **All** -
// Select all records from a query. Results are returned with an array of record objects.
db.select().from(class).where(params).all();
//
// _Example:_
db.select()
  .from('OUser')
  .where({status: 'ACTIVE'})
  .all()
  .then(function (users) {
    console.log('active users', users);
  });

// **Limits** -
// Limit the number of records that are returned.
db.select().from(class).where(params).limit(limits).all();

// **Fetch Plan** -
// Select Records with Fetch Plan.
db.select().from(class).where(params).fetch(plan).all();

//
// _Example:_
db.select()
  .from('OUser')
  .where({status: 'ACTIVE'})
  .fetch({role: 5})
  .all()
  .then(function(users) {
    console.log('active users', users);
  });

// **Expressions** -
// Select an expression
db.select(expression).from(class).where(params).scalar();
//
// _Example:_
db.select('count(*)')
  .from('OUser')
  .where({status: 'ACTIVE'})
  .scalar()
  .then(function(total) {
    console.log('total active users', total);
  });

// Return a specific column
db.select(expression).from(class).where(params).column(columnName).all();
//
// _Example:_
db.select('name')
  .from('OUser')
  .where({status: 'ACTIVE'})
  .column('name')
  .all()
  .then(function(names) {
    console.log('active user names', names.join(', '));
  });

// ###Transform
db.select(expression).from(class).where(params).transform(fields).all();
//
// **Parameters:**
// - **expression** _(String)_ - properties to select.
// - **class** _(String)_ - Class name.
// - **params** _(Object)_ - Where params to restrict the selection of results.
// - **fields** _(Object)_ - Fields to transform results.
//
// **Response:**
// - **list** _(Array)_ - List of record objects.
//
// _Example:_ Transform a field
db.select('name')
  .from('OUser')
  .where({status: 'ACTIVE'})
  .transform({
    status: function(status) {
      return status.toLowerCase();
    }
  })
  .limit(1)
  .one()
  .then(function(user) {
    console.log('user status: ', user.status); // 'active'
  });

// _Example:_ Transform a record
db.select('name')
  .from('OUser')
  .where({status: 'ACTIVE'})
  .transform(function(record) {
    return new User(record);
  })
  .limit(1)
  .one()
  .then(function(user) {
    console.log('user is an instance of User?', (user instanceof User)); // true
  });

// ### Defaults
// Specify default values. If results fail to return a value, a default will be used instead.
db.select(expression).from(class).where(params).defaults(defaults).all();
//
// **Parameters:**
// - **expression** _(String)_ - properties to select.
// - **class** _(String)_ - Class name.
// - **params** _(Object)_ - Where params to restrict the selection of results.
// - **defaults** _(Object)_ - Default values.
//
// **Response:**
// - **list** _(Array)_ - List of record objects.
//
// _Example:_
db.select('name')
  .from('OUser')
  .where({status: 'ACTIVE'})
  .defaults({
    something: 123
  })
  .limit(1)
  .one()
  .then(function(user) {
    console.log(user.name, user.something);
  });

// ### Traverse
db.traverse().from(class).where(params).all();
//
// **Parameters:**
// - **class** _(String)_ - Class name.
// - **params** _(Object)_ - Where params to restrict the selection of results.
//
// **Response:**
// - **list** _(Array)_ - List of record objects.
//
// _Example:_
db.traverse()
  .from('OUser')
  .where({name: 'guest'})
  .all()
  .then(function(records) {
    console.log('found records', records);
  });

// ### Insert
db.insert().into(class).set(properties).one();
//
// **Parameters:**
// - **class** _(String)_ - Class name.
// - **properties** _(Object)_ - Properties to set.
//
// **Response:**
// - **Record** _(Object)_ - Record object.
//
// _Example:_
db.insert()
  .into('OUser')
  .set({name: 'demo', password: 'demo', status: 'ACTIVE'})
  .one()
  .then(function(user) {
    console.log('created', user);
  });

// ### Update
db.update(class).set(properties).where(params).scalar();
//
// **Parameters:**
// - **class** _(String)_ - Class name.
// - **properties** _(Object)_ - Properties to set.
// - **params** _(Object)_ - Where params to restrict the selection of results.
//
// **Response:**
// - **results** _(Number)_ - Number of records updated.
//
// _Example:_
db.update('OUser')
  .set({password: 'changed'})
  .where({name: 'demo'})
  .scalar()
  .then(function(total) {
    console.log('updated', total, 'users');
  });

// ### Delete
db.delete().from(class).where(params).limit(limits).scalar();
//
// **Parameters:**
// - **class** _(String)_ - Class name.
// - **params** _(Object)_ - Where params to restrict the selection of results.
// - **limits** _(String)_ - Maximum number of results to return.
//
// **Response:**
// - **results** _(Boolean)_ - If record is deleted, returns true. Otherwise false.
//
// _Example:_
db.delete()
  .from('OUser')
  .where({name: 'demo'})
  .limit(1)
  .scalar()
  .then(function(total) {
    console.log('deleted', total, 'users');
  });